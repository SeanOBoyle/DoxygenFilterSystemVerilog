// $Id_deleteme$
//----------------------------------------------------------------------------
//    This program is free software: you can redistribute it and/or modify
//    it under the terms of the GNU General Public License as published by
//    the Free Software Foundation, either version 3 of the License, or
//    (at your option) any later version.
//
//    This program is distributed in the hope that it will be useful,
//    but WITHOUT ANY WARRANTY; without even the implied warranty of
//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//    GNU General Public License for more details.
//
//    You should have received a copy of the GNU General Public License
//    along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
//----------------------------------------------------------------------------
// NOTE: 'deleteme' comments added to prevent SVN from changing text (where the sv and golden would result in a mismatch)
/**
 * Test - brief comment.
 * This file is a test of the doxygen filter script.<br>
 * This contains a semi-complete set of the SystemVerilog constructs
 * that the filter script can handle<br>
 * <br>
 * <br>
 * @par Download the most recent version here:
 * http://intelligentdv.com/downloads/
 * <br>
 * @par File Bugs Here:
 * http://bugs.intelligentdv.com/ <br>
 * Project:  DoxygenFilter
 *
 * @file test.sv
 * @author Author O'Author
 * @par Contact:
 * http://intelligentdv.com/contact/
 * @par Company:
 * <a href="http://intelligentdv.com">Intelligent Design Verification</a>
 *
 * @version
 * $LastChangedRevision_deleteme$
 * @par Last Change Date:
 * $LastChangedDate_deleteme$
 * @par Last Change By:
 * $LastChangedBy_deleteme$
 *
 */

#ifndef TEST__SV
#define TEST__SV




/**
 * Put in Quotes Macro.
 * A paremeterized macro that puts X in quotes
 */
#define PUTINQUOTES(x) #x

#include "myfile.sv"
/**
 * My Other File Define.
 * My other file is C++!
 */
#define MYOTHERFILE myotherfile.sv
#include PUTINQUOTES(MYOTHERFILE)


// DPI Import
/**
 *  DPI Method1.
 *  A DPI-C import of method dpi_method1<br>
 *
 *  @param str1 string - description of parameter str1
 *  @param regex string - description of parameter regex
 *  @return int
 */
 int dpi_method1(input string str1, input string regex) {}
/**
 *  DPI Method2.
 *  A DPI-C import of method dpi_method2<br>
 *
 *  @return string
 */
 string dpi_method2() {}
/**
 *  DPI Method3.
 *  A DPI-C import of method dpi_method3<br>
 *
 *  @return string
 */
 string dpi_method3() {}
/**
 *  DPI Method4.
 *  A DPI-C import of method dpi_method4<br>
 *
 *  @param n int - description of parameter n
 *  @return string
 */
 string dpi_method4(int n) {}
/**
 *  DPI My Init.
 *  A DPI-C import of method myInit<br>
 *
 *  @return void
 */
 void myInit() {}
/**
 *  DPI Sin.
 *  A DPI-C import of method sin<br>
 *  From standard math library
 *
 *  @param n real - description of parameter n
 *  @return real
 */
 real sin(real n) {}
/**
 *  DPI malloc.
 *  A DPI-C import of method malloc<br>
 *  From standard C library: memory management
 *
 *  @param size chandle - description of parameter size
 *  @return chandle
 */
 chandle malloc(int size); // standard C function
/**
 *  DPI free.
 *  A DPI-C import of method free<br>
 *  From standard C library: memory management
 *
 *  @param ptr chandle - description of parameter ptr
 *  @return void
 */
 void free(chandle ptr); // standard C function
/**
 *  DPI New Queue.
 *  A DPI-C import of method newQueue<br>
 *  abstract data structure: queue
 *
 *  @param name_of_queue chandle - description of parameter name_of_queue
 *  @return chandle
 */
 chandle newQueue(input string name_of_queue) {}
/**
 *  DPI New (Anon) Queue.
 *  A DPI-C import of method newAnonQueue - renamed to newQueue2<br>
 *  abstract data structure: queue
 *
 *  @note Note the following import uses the same foreign function for
 *        implementation as the prior import, but has different SystemVerilog name
 *        and provides a default value for the argument.
 *
 *  @param s string - description of parameter s (defaults to null)
 *  @return chandle
 */
 chandle newAnonQueue(input string s=null) {}
/**
 *  DPI New Element.
 *  A DPI-C import of method newElem<br>
 *
 *  @param mybitvector bit[15:0] - description of parameter s (defaults to null)
 *  @return chandle
 */
 chandle newElem(bit <15:0>  mybitvector) {}
/**
 *  DPI Enqueue.
 *  A DPI-C import of method enqueue<br>
 *
 *  @param queue chandle - description of parameter queue
 *  @param elem chandle - description of parameter elem
 *  @return void
 */
 void enqueue(chandle queue, chandle elem) {}
/**
 *  DPI Dequeue.
 *  A DPI-C import of method dequeue<br>
 *
 *  @param queue chandle - description of parameter queue
 *  @return chandle
 */
 chandle dequeue(chandle queue) {}
/**
 *  DPI Get Stimulus.
 *  A DPI-C import of method getStimulus<br>
 *
 *  @return bit [15:0]
 */
 bit <15:0>  getStimulus() {}
/**
 *  DPI Process Transaction.
 *  A DPI-C import of method processTransaction<br>
 *
 *  @param elem chandle - description of parameter elem
 *  @param arr [64:1] logic [0:63] - description of parameter arr
 *  @return void
 */
 void processTransaction(chandle elem,
                                                        output logic <64:1>  arr [0:63]) {}
/**
 *  DPI Check Results.
 *  A DPI-C import of method checkResults<br>
 *
 *  @param s string - description of parameter s
 *  @param packet bit [511:0] - description of parameter packet
 */
task checkResults(input string s, bit <511:0>  packet) {}

// DPI Export -- exported methods are not documented; since they are replicated


// Macros
/**
 *  My Define.
 *  A define for fun<br>
 */
#define MYDEFINE mydefine
#ifdef MYDEFINE
/**
 *  My Define2.
 *  Another define and also fun<br>
 */
#define MYDEFINE2 mydefine2
#else
#undef MYDEFINE2
#endif

// More Macros
/**
 *  foo define.
 *  define with concatenation<br>
 */
#define foo(f) f##_suffix
/**
 *  msg define.
 *  define with concatenation<br>
 */
#define msg(x,y) "x: \"y\""

// Multiline Macros (from VMM)
#ifndef __FILE__
/**
 *  FILE define.
 *  define with doublequotes<br>
 */
#define __FILE__ ""
#endif
#ifndef __LINE__
/**
 *  Line define.
 *  incase __LINE__ isn't defined<br>
 */
#define __LINE__ -1
#endif

/**
 *  Test of Stringizer # in macro.
 *
 */
#define testofquotes(passedstring) \
  string astring = #passedstring;

/**
 *  A better Test of Stringizer # in macro.
 *  Uses an ovm macro.
 */
#define ovm_get_type_name_func(T) \
   const static string type_name = #T; \
   virtual  string get_type_name () { \
     return type_name; \
   }

ovm_get_type_name_func(foo);


/**
 *  Parameterized Macro VMM Warning.
 *  A parameterized macro - taken from VMM<br>
 */
#define vmm_warning(log, msg)  \
do \
   /* synopsys translate_off */ \
   if (log.start_msg(vmm_log::FAILURE_TYP, vmm_log::WARNING_SEV, __FILE__, __LINE__)) { \
      void(log.text(msg)); \
      log.end_msg(); /* a comment in a macro */ \
      something("with some quotes and a keyword end") \
   } \
   /* synopsys translate_on */ \
while(0)

/**
 *  Parameterized Macro VMM Error.
 *  A parameterized macro - taken from VMM<br>
 */
#define vmm_error(log, msg)  \
do \
   /* synopsys translate_off */ \
   if (log.start_msg(vmm_log::FAILURE_TYP, vmm_log::ERROR_SEV, __FILE__, __LINE__)) { \
      void(log.text(msg)); \
      log.end_msg(); \
   } \
   /* synopsys translate_on */ \
while (0)

/**
 *  Parameterized Macro VMM Fatal.
 *  A parameterized macro - taken from VMM<br>
 */
#define vmm_fatal(log, msg)  \
do \
   /* synopsys translate_off */ \
   if (log.start_msg(vmm_log::FAILURE_TYP, vmm_log::FATAL_SEV, __FILE__, __LINE__)) { \
      void(log.text(msg)); \
      log.end_msg(); \
   } \
   /* synopsys translate_on */ \
while (0)

/**
 *  Parameterized Macro VMM Channel.
 *  A parameterized macro - taken from VMM<br>
 *  @note there's an inline comment in this one
 */
#define vmm_channel(T) \
class vmm_channel_(T) : public vmm_channel { public:  \
 \
    new(string name, \
                string inst, \
                int    full = 1, \
                int    empty = 0, \
                bit    fill_as_bytes = 0) { \
      super.new(name, inst, full, empty, fill_as_bytes); \
   } \
 \
    T unput(int offset = -1) { \
      $cast(unput, super.unput(offset)); \
   } \
 \
   constraint myconstraint() {  \
      depth == 3; \
      foo == 5; \
   } \
   \
   task get(output T obj, input int offset = 0) { \
      vmm_data o; \
      super.get(o, offset); \
      $cast(obj, o); \
   } \
   \
    covergroup mycov() { \
      coverpoint m_depth; \
      coverpoint m_full; \
   } \
 \
   task peek(output T obj, input int offset = 0) { \
      vmm_data o; \
      super.peek(o, offset); \
      $cast(obj, o); \
   } \
 \
   task activate(output T obj, input int offset = 0) { \
      vmm_data o; \
      super.activate(o, offset); \
      $cast(obj, o); \
   } \
 \
    T active_slot() { \
      $cast(active_slot, super.active_slot()); \
   } \
 \
    T start() { \
      $cast(start, super.start()); \
   } \
 \
    T complete(vmm_data status = null) { \
      $cast(complete, super.complete(status)); \
   } \
 \
    T remove() { \
      $cast(remove, super.remove()); \
   } \
 \
   task tee(output T obj) { \
      vmm_data o; \
      super.tee(o); \
      $cast(obj, o); \
   } \
 \
    T for_each(bit reset = 0) { \
      $cast(for_each, super.for_each(reset)); \
   } \
 \
};

/**
 *  Define TLM FIFO Task Error Message.
 *  A macro - with a SV keyword embedded<br>
 */
#define TLM_FIFO_TASK_ERROR "fifo channel task not implemented"
/**
 *  Define TLM FIFO Function Error Message.
 *  A macro - with a SV keyword embedded<br>
 */
#define TLM_FIFO_FUNCTION_ERROR "fifo channel function not implemented"
/**
 *  Define TLM FIFO Function Error2 Message.
 *  A multiline macro - with a SV keyword embedded<br>
 */
#define TLM_FIFO_FUNCTION_ERROR2 "fifo channel \
                             function not implemented \
                             yes we have no bananas \
                             today function" things

/**
 *  Define TLM FIFO Function Error3 Message.
 *  A multiline macro - with a SV keyword embedded and an empty line with a trailing word<br>
 */
#define TLM_FIFO_FUNCTION_ERROR3 "fifo channel \
\
                             function not implemented \
                             yes we have no bananas \
                             today function" things


/**
 * Include Package - collection of classes.
 * This is my package - it has a collection of classes that are included with file inclusion
 *
 */


   #include "test_incl.sv"




/**
 * Foo Package - collection of classes.
 * This is my package - it has a collection of classes
 *
 */

   /**
    *  Test Class in foo package.
    *  Just a basic class declaration in a class.<br>
    *
    *  @class foo_test_class
    *
    */
   class foo_test_class { public: 
      int m_anint; ///< An Int
   };
   /**
    *  Test Class2 in foo package.
    *  Just a basic class declaration in a class.<br>
    *
    *  @class foo_test_class2
    *
    */
   class foo_test_class2 { public: 
      int m_anint; ///< An Int
   };



/**
 * Goo Package - collection of classes.
 * This is my goo package - it has a collection of classes
 * and it uses another package - foopack::*
 *
 */

   
   /**
    *  Test Class in a Package.
    *  Just a basic class declaration in a class.<br>
    *
    *  @class goo_test_class
    *
    */
   class goo_test_class : public foo_test_class { public: 
      int m_anint;  ///< An Int
      foo_test_class2 m_ftc;  ///< Foo Test Class
   };



/**
 * Moo Package - collection of classes.
 * This is my moo package - it has a collection of classes
 * and it uses another package's class directly: goopack::goo_test_class
 *
 */

   
   /**
    *  Test Class in a Package.
    *  Just a basic class declaration in a class.<br>
    *
    *  @class moo_test_class
    *
    */
   class moo_test_class : public goo_test_class { public: 
      int m_anint; ///< An Int
   };



/**
 * Doo Package - collection of classes.
 * This is my doo package - it has a collection of classes
 * and it uses another package: moopack
 *
 */

   
   /**
    *  Test Class in a Package.
    *  Just a basic class declaration in a class.<br>
    *
    *  @class doo_test_class
    *
    */
   class doo_test_class : public moo_test_class { public: 
      int m_anint; ///< An Int
   };



/**
 *  Test Class - Basic.
 *  Just a basic class declaration.<br>
 *  "String in Quotes in a comment"
 *
 *  @class test_class_basic
 *
 */
class test_class_basic { public: 

   // Test Member Access Specifiers
private:     rand int     m_local_int;      ///< Private Int
protected:     rand int m_protected_int;  ///< Protected Int
    rand bit m_protected_bit;  ///< Protected Bit
public:          event   m_public_event;   ///< Public Event
private:     event   m_local_event;    ///< Private Event
public:          int     m_int_array [1:32];  ///< Fixed Size Array of Int
   // Test bitvector brace conversion
         rand bit <31:0>  m_public_bitvector; ///< Public Bit Vector
   // Test enum typedef
   typedef enum {A, ///< A State
                  B, ///< B State
                  C, ///< C State
                  D  ///< D State
                 } alpha_enum_t;  ///< Alpha State Enum Type

   typedef enum { M, ///< M State
                            N  ///< N State
                            } mn_enum_t; ///< Bit State Enum Type

protected:     enum {Z,Y} m_zy; ///< ZY Enumeration
public: 
   int m_another_int; ///< Another Public Int

protected:     enum {THIS,
                       IS,
                       THE,
                       ONE
                      } m_theone; ///< Tough one
public: 
   int m_yetanotherint; ///< Yet Another Public Int

   alpha_enum_t m_alpha; ///< Alpha State
	#ifdef FOO
private:     mn_enum_t    m_mn;    ///< MN State
	#endif
public: 	bit    m_public_var; ///< A public variable

   /**
    * Small Int Constraint.
    * Constrain m_local_int to a small value.
    *
    */
   constraint small_int() { m_local_int <= 0d6;}

   /**
    * Word Align Constraint.
    * Constrain m_public_bitvector to word align
    *
    */
   constraint word_align() { 
      // This is a comment
      m_public_bitvector[2] == 0d0;
   }

   /**
    * Extern Constraint.
    * Constraint body defined extern.
    *
    */
   constraint extern_constraint();

   /**
    * Cov1 Coverage Group.
    * Covers m_alpha and m_mn
    *
    */
    covergroup cov1() {
      coverpoint m_alpha;
      coverpoint m_mn;
   }

   /**
    * Cov2 Coverage Group.
    * Covers m_protected_bit and m_protected_int on m_protected_bit event.
    *
    */
    covergroup cov2 () {
      coverpoint m_protected_bit;
      coverpoint m_protected_int;
   }

   /**
    * Cov3 Coverage Group with args.
    * Covers m_protected_bit and m_protected_int on m_protected_bit event.
    *
    */
    covergroup cov3 (int arg1, int arg2) {
      coverpoint m_protected_bit;
      coverpoint m_protected_int;
   }

   /**
    * Cov4 Coverage Group with args on 2 lines.
    * Covers m_protected_bit and m_protected_int on m_protected_bit event.
    *
    */
    covergroup cov4 (int arg1,
                    int arg2) {
      coverpoint m_protected_bit;
      coverpoint m_protected_int;
   }

   /**
    * Cov5 Coverage Group with args on with sampling.
    * Covers m_protected_bit and m_protected_int on m_protected_bit event.
    *
    */
    covergroup cov5 (int arg1,
                    int arg2)  {
      coverpoint m_protected_bit;
      coverpoint m_protected_int;
   }

   /**
    *  Constructor.
    *  Class Constructor<br>
    *
    *  @param myint int - description of parameter myint
    *  @param mybit bit - description of parameter mybit (defaults to 0)
    */
    new(time myint, bit mybit = 0) {
      m_local_int = myint;
      m_protected_bit = mybit;
      cov1 = new;
      cov2 = new;
   }

   /**
    *  Protected Extern Function.
    *  Test extern function<br>
    *  Test method access specifier
    *
    *  @return void
    *
    */
protected:      void myprotectedexternfunction();
public: 
   /**
    *  Extern Function.
    *  Test extern function<br>
    *  Test method access specifier
    *
    *  @return void
    *
    */
private:      void myexternfunction();
public: 
   /**
    *  Public Task.
    *  Test method access specifier.<br>
    *  Test virtual method specifier.
    *
    */
   virtual task mypublicvirtualfunction() {
      $display("This is public");
   }

   /**
    *  Pure Virtual Task.
    *  Test pure virtual specifier
    *
    */
   virtual task mypurevirtualtask() = 0;

   /**
    *  Protected Task.
    *  Test method access specifier
    *
    */
protected:     task myprotectedfunction() {
      $display("This is protected");
   }
public: 
   /**
    *  Protected Task.
    *  Test method access specifier
    *
    */
protected:     task myprotectedfunction() {
      $display("This is protected");
   }
public: 
   /**
    *  Pure Virtual Function.
    *  Test pure virtual specifier
    *
    *  @param A int - description of parameter A
    *  @param B int - description of parameter B
    *  @return int
    *
    */
   virtual  int mypurevirtualfunction(int A,
                                                   int B) = 0;


   /**
    *  local function.
    *  Test method access specifier
    *
    *  @return void
    *
    */
private:      void myprivatefunction() {
      $display("This is private");
   }
public: 
   /**
    *  Virtual Function.
    *  Test Virtual Function<br>
    *  Test bit vector braces<br>
    *  Test literals with tickmark (')<br>
    *
    *  @return void
    */
    virtual  void myvirtualfunction() {
       int myint = 0d3;
       bit <7:0>   mybitvector = 0xX;
       bit <15:0>  mybitvector2 = 0xBEEF;
       bit <31:0>  mybitvector3 = 0o3355;
       {
          bit <1:0>   mybitvector4 = 0b01;
          bit <1:0>   mybitvecotr5 = 0b10;
       }
    }

};

//----------------------------------------------------------------------------
// Extern Constraint
//----------------------------------------------------------------------------
constraint test_class_basic::extern_constraint() { 
   m_local_int == m_protected_int;
}

//----------------------------------------------------------------------------
// My Extern Function
//----------------------------------------------------------------------------
// Extern Function show()
// Test string in quotes
 void test_class_basic::myexternfunction() {
   $display("test::show()");
   $display("m_local_int %0d", m_local_int);
   {
      $display("m_protected_int %0d", m_protected_int);
      $display("m_protected_bit %0b", m_protected_bit);
   }
   $display("");
}


//----------------------------------------------------------------------------
// My Protected Extern Function
//----------------------------------------------------------------------------
 void test_class_basic::myprotectedexternfunction() {
   // Cast from bit to int
   int myint;
   bit <7:0>  mybitvector;

   myint = int(m_mn);
   mybitvector = bit <7:0> (m_alpha);

}

/**
 * MyProgram1 Program Block.
 * Just a program block with no inputs/outputs
 */
/** @ingroup SVprogram */program myprogram1() {
   {
     int myint = 5;
     int myint2 = 6;
     $display("Hello World");
     case  (myint) { 
        0: myint2 = 1;
        1: myint2 = 0;
        default: myint2 = 2;
     }
  }
}

/**
 * MyProgram2 Program Block.
 * A program block with inputs/outputs declared over multiple lines
 *
 *  @param myint int - description of parameter myint
 *  @param mybit int - description of parameter mybit
 *
 */
/** @ingroup SVprogram */program myprogram2(int myint,
                   bit mybit) {
   {
     $display("Hello World");
  }
   {
     $display("Goodbye World");
  }
}

/**
 * MyModule1 Module Block.
 * Just a module block with no inputs/outputs
 */
/** @ingroup SVmodule */module mymodule1() {
    {
      $display("Hello World");
   }
}

/**
 * MyModule2 Module Block.
 * A module block with inputs/outputs declared over multiple lines
 *
 *  @param myint int - description of parameter myint
 *  @param mybit int - description of parameter mybit
 *
 */
/** @ingroup SVmodule */module mymodule2(int myint,
                 bit mybit) {
    bus_A mybus;
    {
      $display("Hello World");
   }
}

/**
 * MyModule3 Module Block.
 * A module block with inputs/outputs declared over multiple lines - starting on the next line
 *
 *  @param myint int - description of parameter myint
 *  @param mybit int - description of parameter mybit
 *
 */
/** @ingroup SVmodule */module mymodule3
(
int myint,
bit mybit
) {
    {
      $display("Hello World");
   }
}

/**
 * Bus interface Block.
 * An interface with no ports.
 */
/** @ingroup SVinterface */interface bus() {
      logic <15:0>  data;
      logic write;
      modport test (input data, output write);
      modport dut (output data, input write);
}

/**
 * BusA interface Block.
 * An interface with single clock input.
 *
 *  @param clk bit - description of parameter clk
 *
 */
/** @ingroup SVinterface */interface bus_A(input bit clk) {
      logic <15:0>  data;
      logic write;
      modport test (input data, output write);
      modport dut (output data, input write);
}

/**
 * BusB interface Block.
 * An interface with two lines of I/O
 *
 *  @param clk bit - description of parameter clk
 *  @param foo logic - description of parameter foo
 *
 */
/** @ingroup SVinterface */interface bus_B(input bit clk,
                 output logic foo) {
      logic <8:1>  cmd;
      logic enable;
      logic foo;
      modport test (input enable);
      modport dut (output enable);
}

/**
 * BusC interface Block.
 * A parameterized interface in one line
 *
 *  @param clk bit - description of parameter clk
 *  @param foo logic - description of parameter foo
 *
 */
/** @ingroup SVinterface */template <WIDTH=8> interface bus_C(input bit clk, output logic foo) {
      logic <WDTH-1:0>  cmd;
      logic enable;
      modport test (input enable);
      modport dut (output enable);
}

/**
 * BusD interface Block.
 * A parameterized interface with two lines of IO
 *
 *  @param clk bit - description of parameter clk
 *  @param foo logic - description of parameter foo
 *
 */
/** @ingroup SVinterface */template <WIDTH=8> interface bus_D(input bit clk,
                            output logic foo) {
      logic <WDTH-1:0>  cmd;
      logic enable;
      modport test (input enable);
      modport dut (output enable);
}

/**
 * BusE interface Block.
 * A parameterized interface with two lines of parameters and one lines of IO
 *
 *  @param clk bit - description of parameter clk
 *  @param foo logic - description of parameter foo
 *
 */
/** @ingroup SVinterface */template <WIDTH=8,
                  DEPTH=20> interface bus_E  (input bit clk, output logic foo) {
      logic <WDTH-1:0>  cmd;
      logic enable;
      logic arr [DEPTH];
      modport test (input enable);
      modport dut (output enable);
}

/**
 * BusF interface Block.
 * A parameterized interface with two lines of parameters and two lines of IO
 *
 *  @param clk bit - description of parameter clk
 *  @param foo logic - description of parameter foo
 *
 */
/** @ingroup SVinterface */template <WIDTH=8,
                  DEPTH=20> interface bus_F  (input bit clk,
                             output logic foo) {
      logic <WDTH-1:0>  cmd;
      logic enable;
      logic arr [DEPTH];
      modport test (input enable);
      modport dut (output enable);
}

/**
 * My Derived Class.
 * Extends test_class_basic
 *
 * @class myderivedclass
 *
 */
class myderivedclass : public test_class_basic { public: 
   int m_myint; ///< Description of My Int
   bit m_mybit; ///< Description of My Bit
};

/**
 * My Derived Class Package.
 * Extends foopack::foo_test_class
 *
 * @class myderivedclass_package
 *
 */
class myderivedclass_package : public foo_test_class { public: 
   int m_myint; ///< Description of My Int
   bit m_mybit; ///< Description of My Bit
};

/**
 * My Template Class.
 * type T=int
 * extends test_class_basic
 *
 * @class mytemplateclass
 *
 */
template  <typename T=int> class mytemplateclass : public test_class_basic { public: 
   int m_myint; ///< Description of My Int
   bit m_mybit; ///< Description of My Bit
};

/**
 * My Template Class2.
 * type T=custom
 * extends mytemplateclass#(bit)
 *
 * @class mytemplateclass2
 *
 */
template  <typename T=custom> class mytemplateclass2 : public mytemplateclass <bit>  { public: 
   int m_myint; ///< Description of My Int
   bit m_mybit; ///< Description of My Bit
};

/**
 * My Template Class3.
 * type T=int, type B=bit
 * extends mytemplateclass#(bit)
 *
 * @class mytemplateclass3
 *
 */
template  <typename T=int, typename B=bit> class mytemplateclass3 : public mytemplateclass <bit>  { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class4.
 * type T=int
 * extends nothing...
 *
 * @class mytemplateclass4
 *
 */
template  <typename T=int> class mytemplateclass4   { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class5.
 * int B=3
 * extends nothing...
 *
 * @class mytemplateclass5
 *
 */
template  <int B=3> class mytemplateclass5   { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class6.
 * type T=int, int B=3
 * extends nothing...
 *
 * @class mytemplateclass6
 *
 */
template  <typename T=int, int B=3> class mytemplateclass6   { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class7.
 * type T=int, int B=3
 * extends mytemplateclass#(bit)
 *
 * @class mytemplateclass7
 *
 */
template  <typename T=int, int B=3> class mytemplateclass7 : public mytemplateclass <bit>  { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class8.
 * type T=int, int B=3, type C=mine
 * extends mytemplateclass6#(bit, 5)
 *
 * @class mytemplateclass8
 *
 */
template  <typename T=int,
                        int B=3,
                        typename C=mine> class mytemplateclass8  
                       : public mytemplateclass6 <bit,
                                                   5>  { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class9.
 * type T=int, int B=3, type C=mine
 * extends mytemplateclass4#(bit, 5)
 *
 * @class mytemplateclass9
 *
 */
template  <typename T=int,
                         int B=3,
                         typename C=mine> class mytemplateclass9  
                         : public mytemplateclass6 <bit,5>  { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Class10.
 * type T=int, int B=3, type C=mine
 * extends nothing...
 *
 * @class mytemplateclass10
 *
 */
template  <typename T=int,
                         int B=3,
                         typename C=mine> class mytemplateclass10   { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Class11.
 * extends template class...
 *
 * @class myclass11
 *
 */
class myclass11 : public mytemplateclass10 <foo, 5, boo>  { public: 
   int m_myint;
};

/**
 * My Template Class12.
 * type T=int, int B=3, type C=mine
 * extends mytemplateclass6#(bit, 5)
 *
 * @class mytemplateclass12
 *
 */
template 
   <typename T=int,
     int B=3,
     typename C=mine> class mytemplateclass12  
   : public mytemplateclass6 <bit,
                             5>  { public: 
   int m_myint;
   bit m_mybit;
};

/**
 * My Template Select Class.
 * Template class that is an ifdef extension of a `defined base class
 *
 * @class mytemplateselectclass
 *
 */
template  <typename ABC=data, typename DEF=data2> class mytemplateselectclass  
#ifdef DEFBASE
  : public DEFBASE
#endif
 { public: 
   int m_myint;
};

/**
 * My Select Class.
 * Class that is an ifdef extension of a `defined base class
 *
 * @class myselectclass
 *
 */
class myselectclass
#ifdef DEFBASE
  : public DEFBASE
#endif
 { public: 
   int m_myint;
};

/**
 * abc Class.
 * Template Class with 3 template types extending a template class "def"
 *
 * @class abc
 *
 */
template  <typename f = null, typename g = z, typename h = x> class abc : public def <f>  { public: 
   int m_myint;
};

#endif


/** @defgroup SVinterface Interfaces */
/** @defgroup SVprogram Programs */
/** @defgroup SVmodule Modules */
